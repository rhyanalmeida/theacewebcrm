#!/bin/bash

# ACE CRM Production Build Script
# This script builds all components for production deployment

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
BUILD_DIR="$PROJECT_ROOT/dist"
NODE_ENV=production
BUILD_TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

echo -e "${PURPLE}üèóÔ∏è Starting ACE CRM Production Build...${NC}"

# Function to check build requirements
check_build_requirements() {
    echo -e "${BLUE}üîç Checking build requirements...${NC}"
    
    # Check Node.js version
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js not found${NC}"
        exit 1
    fi
    
    NODE_VERSION=$(node --version | cut -d'v' -f2)
    REQUIRED_VERSION="18.0.0"
    
    echo -e "${GREEN}‚úÖ Node.js version $NODE_VERSION${NC}"
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå npm not found${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ npm $(npm --version)${NC}"
    
    # Check TypeScript
    if ! npm list -g typescript > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  TypeScript not installed globally, using local version${NC}"
    else
        echo -e "${GREEN}‚úÖ TypeScript available${NC}"
    fi
    
    # Check disk space (need at least 1GB free)\n    AVAILABLE_SPACE=$(df "$PROJECT_ROOT" | tail -1 | awk '{print $4}')\n    if [ "$AVAILABLE_SPACE" -lt 1048576 ]; then  # 1GB in KB\n        echo -e "${RED}‚ùå Insufficient disk space. Need at least 1GB free.${NC}"\n        exit 1\n    fi\n    \n    echo -e "${GREEN}‚úÖ Sufficient disk space available${NC}"\n}\n\n# Function to clean previous builds\nclean_builds() {\n    echo -e "${BLUE}üßπ Cleaning previous builds...${NC}"\n    \n    # Clean main build directory\n    if [ -d "$BUILD_DIR" ]; then\n        rm -rf "$BUILD_DIR"\n        echo -e "${GREEN}‚úÖ Cleaned main build directory${NC}"\n    fi\n    \n    # Clean component build directories\n    CLEAN_DIRS=(\n        "$PROJECT_ROOT/ace-crm/backend/dist"\n        "$PROJECT_ROOT/frontend/.next"\n        "$PROJECT_ROOT/client-portal/.next"\n        "$PROJECT_ROOT/ace-crm/backend/build"\n    )\n    \n    for dir in "${CLEAN_DIRS[@]}"; do\n        if [ -d "$dir" ]; then\n            rm -rf "$dir"\n            echo -e "${GREEN}‚úÖ Cleaned $(basename "$(dirname "$dir")")/$(basename "$dir")${NC}"\n        fi\n    done\n    \n    # Clean node_modules if requested\n    if [ "${1:-}" = "--clean-deps" ]; then\n        echo -e "${YELLOW}üßπ Cleaning node_modules...${NC}"\n        find "$PROJECT_ROOT" -name "node_modules" -type d -prune -exec rm -rf {} \\;\n        echo -e "${GREEN}‚úÖ All node_modules cleaned${NC}"\n    fi\n}\n\n# Function to create build directory structure\ncreate_build_structure() {\n    echo -e "${BLUE}üìÅ Creating build directory structure...${NC}"\n    \n    mkdir -p "$BUILD_DIR"/{backend,frontend,client-portal,scripts,config,docs}\n    \n    # Create build info file\n    cat > "$BUILD_DIR/build-info.json" << EOF\n{\n  "version": "1.0.0",\n  "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",\n  "buildTimestamp": "$BUILD_TIMESTAMP",\n  "nodeVersion": "$(node --version)",\n  "npmVersion": "$(npm --version)",\n  "environment": "$NODE_ENV",\n  "components": {\n    "backend": "Node.js/Express API",\n    "frontend": "Next.js Admin Dashboard",\n    "clientPortal": "Next.js Client Portal"\n  }\n}\nEOF\n    \n    echo -e "${GREEN}‚úÖ Build structure created${NC}"\n}\n\n# Function to install dependencies\ninstall_dependencies() {\n    local component_name=$1\n    local component_dir=$2\n    \n    echo -e "${BLUE}üì¶ Installing $component_name dependencies...${NC}"\n    \n    if [ -f "$component_dir/package.json" ]; then\n        cd "$component_dir"\n        \n        # Clean install for production\n        npm ci --only=production\n        \n        echo -e "${GREEN}‚úÖ $component_name dependencies installed${NC}"\n    else\n        echo -e "${RED}‚ùå No package.json found in $component_dir${NC}"\n        return 1\n    fi\n}\n\n# Function to build backend\nbuild_backend() {\n    echo -e "${BLUE}üèóÔ∏è Building Backend API...${NC}"\n    \n    BACKEND_DIR="$PROJECT_ROOT/ace-crm/backend"\n    \n    if [ -d "$BACKEND_DIR" ]; then\n        cd "$BACKEND_DIR"\n        \n        # Install dependencies including dev dependencies for build\n        echo -e "${BLUE}  üì¶ Installing build dependencies...${NC}"\n        npm ci\n        \n        # Type check\n        echo -e "${BLUE}  üîç Type checking...${NC}"\n        npm run typecheck || {\n            echo -e "${RED}‚ùå Backend type check failed${NC}"\n            return 1\n        }\n        \n        # Run linter\n        echo -e "${BLUE}  üßπ Linting code...${NC}"\n        npm run lint || {\n            echo -e "${YELLOW}‚ö†Ô∏è  Linting warnings found, continuing...${NC}"\n        }\n        \n        # Build TypeScript\n        echo -e "${BLUE}  üî® Compiling TypeScript...${NC}"\n        npm run build || {\n            echo -e "${RED}‚ùå Backend build failed${NC}"\n            return 1\n        }\n        \n        # Copy built files to build directory\n        echo -e "${BLUE}  üìã Copying build artifacts...${NC}"\n        cp -r dist/* "$BUILD_DIR/backend/"\n        cp package.json "$BUILD_DIR/backend/"\n        cp package-lock.json "$BUILD_DIR/backend/" 2>/dev/null || true\n        \n        # Install production dependencies in build directory\n        cd "$BUILD_DIR/backend"\n        npm ci --only=production\n        \n        echo -e "${GREEN}‚úÖ Backend build completed${NC}"\n    else\n        echo -e "${RED}‚ùå Backend directory not found${NC}"\n        return 1\n    fi\n}\n\n# Function to build frontend\nbuild_frontend() {\n    echo -e "${BLUE}üèóÔ∏è Building Frontend Application...${NC}"\n    \n    FRONTEND_DIR="$PROJECT_ROOT/frontend"\n    \n    if [ -d "$FRONTEND_DIR" ]; then\n        cd "$FRONTEND_DIR"\n        \n        # Install dependencies\n        echo -e "${BLUE}  üì¶ Installing dependencies...${NC}"\n        npm ci\n        \n        # Type check\n        echo -e "${BLUE}  üîç Type checking...${NC}"\n        npm run type-check || {\n            echo -e "${RED}‚ùå Frontend type check failed${NC}"\n            return 1\n        }\n        \n        # Lint\n        echo -e "${BLUE}  üßπ Linting code...${NC}"\n        npm run lint || {\n            echo -e "${YELLOW}‚ö†Ô∏è  Linting warnings found, continuing...${NC}"\n        }\n        \n        # Build Next.js app\n        echo -e "${BLUE}  üî® Building Next.js application...${NC}"\n        NODE_ENV=production npm run build || {\n            echo -e "${RED}‚ùå Frontend build failed${NC}"\n            return 1\n        }\n        \n        # Copy build artifacts\n        echo -e "${BLUE}  üìã Copying build artifacts...${NC}"\n        cp -r .next/* "$BUILD_DIR/frontend/" 2>/dev/null || mkdir -p "$BUILD_DIR/frontend"\n        cp -r .next "$BUILD_DIR/frontend/"\n        cp -r public "$BUILD_DIR/frontend/"\n        cp next.config.js "$BUILD_DIR/frontend/" 2>/dev/null || true\n        cp package.json "$BUILD_DIR/frontend/"\n        cp package-lock.json "$BUILD_DIR/frontend/" 2>/dev/null || true\n        \n        # Install production dependencies in build directory\n        cd "$BUILD_DIR/frontend"\n        npm ci --only=production\n        \n        echo -e "${GREEN}‚úÖ Frontend build completed${NC}"\n    else\n        echo -e "${RED}‚ùå Frontend directory not found${NC}"\n        return 1\n    fi\n}\n\n# Function to build client portal\nbuild_client_portal() {\n    echo -e "${BLUE}üèóÔ∏è Building Client Portal...${NC}"\n    \n    CLIENT_PORTAL_DIR="$PROJECT_ROOT/client-portal"\n    \n    if [ -d "$CLIENT_PORTAL_DIR" ]; then\n        cd "$CLIENT_PORTAL_DIR"\n        \n        # Install dependencies\n        echo -e "${BLUE}  üì¶ Installing dependencies...${NC}"\n        npm ci\n        \n        # Type check\n        echo -e "${BLUE}  üîç Type checking...${NC}"\n        npm run type-check || {\n            echo -e "${RED}‚ùå Client Portal type check failed${NC}"\n            return 1\n        }\n        \n        # Lint\n        echo -e "${BLUE}  üßπ Linting code...${NC}"\n        npm run lint || {\n            echo -e "${YELLOW}‚ö†Ô∏è  Linting warnings found, continuing...${NC}"\n        }\n        \n        # Build Next.js app\n        echo -e "${BLUE}  üî® Building Next.js application...${NC}"\n        NODE_ENV=production npm run build || {\n            echo -e "${RED}‚ùå Client Portal build failed${NC}"\n            return 1\n        }\n        \n        # Copy build artifacts\n        echo -e "${BLUE}  üìã Copying build artifacts...${NC}"\n        cp -r .next "$BUILD_DIR/client-portal/"\n        cp -r public "$BUILD_DIR/client-portal/" 2>/dev/null || true\n        cp next.config.js "$BUILD_DIR/client-portal/" 2>/dev/null || true\n        cp package.json "$BUILD_DIR/client-portal/"\n        cp package-lock.json "$BUILD_DIR/client-portal/" 2>/dev/null || true\n        \n        # Install production dependencies in build directory\n        cd "$BUILD_DIR/client-portal"\n        npm ci --only=production\n        \n        echo -e "${GREEN}‚úÖ Client Portal build completed${NC}"\n    else\n        echo -e "${RED}‚ùå Client Portal directory not found${NC}"\n        return 1\n    fi\n}\n\n# Function to copy additional files\ncopy_additional_files() {\n    echo -e "${BLUE}üìã Copying additional files...${NC}"\n    \n    # Copy scripts\n    cp -r "$PROJECT_ROOT/scripts"/* "$BUILD_DIR/scripts/"\n    \n    # Copy configuration files\n    FILES_TO_COPY=(\n        "docker-compose.yml"\n        "nginx.conf"\n        "README.md"\n        "DEPLOYMENT.md"\n        "SETUP_GUIDE.md"\n    )\n    \n    for file in "${FILES_TO_COPY[@]}"; do\n        if [ -f "$PROJECT_ROOT/$file" ]; then\n            cp "$PROJECT_ROOT/$file" "$BUILD_DIR/"\n            echo -e "${GREEN}  ‚úÖ Copied $file${NC}"\n        fi\n    done\n    \n    # Copy environment templates\n    find "$PROJECT_ROOT" -name ".env.example" -exec cp {} "$BUILD_DIR/config/" \\;\n    \n    echo -e "${GREEN}‚úÖ Additional files copied${NC}"\n}\n\n# Function to generate deployment documentation\ngenerate_deployment_docs() {\n    echo -e "${BLUE}üìö Generating deployment documentation...${NC}"\n    \n    cat > "$BUILD_DIR/DEPLOYMENT_GUIDE.md" << 'EOF'\n# ACE CRM Production Deployment Guide\n\n## Quick Start\n\n1. **Prerequisites**\n   - Node.js 18+ installed\n   - npm 8+ installed\n   - Supabase account and project configured\n   - Stripe account configured\n   - Domain name and SSL certificate\n\n2. **Environment Setup**\n   ```bash\n   # Copy and configure environment files\n   cp config/.env.example .env\n   # Edit .env with your production values\n   ```\n\n3. **Start Services**\n   ```bash\n   # Make scripts executable\n   chmod +x scripts/*.sh\n   \n   # Start all services\n   ./scripts/start-all.sh\n   ```\n\n## Service Ports\n\n- **Backend API**: http://localhost:5000\n- **Frontend Dashboard**: http://localhost:3000\n- **Client Portal**: http://localhost:3001\n\n## Health Check Endpoints\n\n- **Backend**: `GET http://localhost:5000/api/health`\n- **Frontend**: `GET http://localhost:3000/api/health`\n- **Client Portal**: `GET http://localhost:3001/api/health`\n\n## Process Management\n\n### Using PM2 (Recommended)\n```bash\n# Install PM2 globally\nnpm install -g pm2\n\n# Start with PM2\npm2 start scripts/pm2.ecosystem.config.js\n\n# Monitor processes\npm2 monit\n\n# View logs\npm2 logs\n\n# Stop all\npm2 stop all\n```\n\n### Using Scripts\n```bash\n# Start all services\n./scripts/start-all.sh\n\n# Stop all services\n./scripts/stop-all.sh\n\n# Check status\n./scripts/status-all.sh\n\n# Restart all services\n./scripts/restart-all.sh\n```\n\n## Docker Deployment\n\n```bash\n# Build and start with Docker Compose\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop services\ndocker-compose down\n```\n\n## Monitoring\n\n- Logs are stored in `/var/log/ace-crm/`\n- Health checks run automatically\n- Process monitoring via PM2 or systemd\n\n## Backup and Recovery\n\n- Database backups are handled by Supabase\n- Application logs are rotated automatically\n- Configuration files should be backed up separately\n\n## Security Checklist\n\n- [ ] SSL certificates configured\n- [ ] Environment variables secured\n- [ ] Firewall rules configured\n- [ ] Database access restricted\n- [ ] API rate limiting enabled\n- [ ] CORS properly configured\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Port already in use**\n   ```bash\n   # Find and kill processes using ports\n   lsof -ti:5000 | xargs kill\n   lsof -ti:3000 | xargs kill\n   lsof -ti:3001 | xargs kill\n   ```\n\n2. **Build failures**\n   ```bash\n   # Clean and rebuild\n   ./scripts/build-all.sh --clean-deps\n   ```\n\n3. **Database connection issues**\n   - Check Supabase URL and keys\n   - Verify network connectivity\n   - Check RLS policies\n\n4. **Memory issues**\n   ```bash\n   # Increase Node.js memory limit\n   export NODE_OPTIONS=\"--max-old-space-size=4096\"\n   ```\n\n## Support\n\nFor technical support:\n- Check logs in `/var/log/ace-crm/`\n- Review configuration files\n- Check system resources (CPU, memory, disk)\n- Verify network connectivity\n\nEOF\n\n    echo -e "${GREEN}‚úÖ Deployment guide generated${NC}"\n}\n\n# Function to create build manifest\ncreate_build_manifest() {\n    echo -e "${BLUE}üìã Creating build manifest...${NC}"\n    \n    cat > "$BUILD_DIR/MANIFEST.json" << EOF\n{\n  "build": {\n    "version": "1.0.0",\n    "timestamp": "$BUILD_TIMESTAMP",\n    "date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",\n    "environment": "$NODE_ENV",\n    "node_version": "$(node --version)",\n    "npm_version": "$(npm --version)"\n  },\n  "components": {\n    "backend": {\n      "type": "Node.js/Express API",\n      "port": 5000,\n      "health_check": "/api/health",\n      "build_status": "$([ -d "$BUILD_DIR/backend" ] && echo "success" || echo "failed")"\n    },\n    "frontend": {\n      "type": "Next.js Dashboard",\n      "port": 3000,\n      "health_check": "/api/health",\n      "build_status": "$([ -d "$BUILD_DIR/frontend" ] && echo "success" || echo "failed")"\n    },\n    "client_portal": {\n      "type": "Next.js Client Portal",\n      "port": 3001,\n      "health_check": "/api/health",\n      "build_status": "$([ -d "$BUILD_DIR/client-portal" ] && echo "success" || echo "failed")"\n    }\n  },\n  "files": {\n    "scripts": "$([ -d "$BUILD_DIR/scripts" ] && echo "included" || echo "missing")",\n    "config": "$([ -d "$BUILD_DIR/config" ] && echo "included" || echo "missing")",\n    "docs": "$([ -d "$BUILD_DIR/docs" ] && echo "included" || echo "missing")"\n  },\n  "size": {\n    "total": "$(du -sh "$BUILD_DIR" | cut -f1)",\n    "backend": "$(du -sh "$BUILD_DIR/backend" 2>/dev/null | cut -f1 || echo "0")",\n    "frontend": "$(du -sh "$BUILD_DIR/frontend" 2>/dev/null | cut -f1 || echo "0")",\n    "client_portal": "$(du -sh "$BUILD_DIR/client-portal" 2>/dev/null | cut -f1 || echo "0")"\n  }\n}\nEOF\n    \n    echo -e "${GREEN}‚úÖ Build manifest created${NC}"\n}\n\n# Function to run build verification\nverify_build() {\n    echo -e "${BLUE}üîç Verifying build...${NC}"\n    \n    local errors=0\n    \n    # Check if all components were built\n    REQUIRED_DIRS=("backend" "frontend" "client-portal")\n    \n    for dir in "${REQUIRED_DIRS[@]}"; do\n        if [ -d "$BUILD_DIR/$dir" ]; then\n            echo -e "${GREEN}  ‚úÖ $dir build found${NC}"\n        else\n            echo -e "${RED}  ‚ùå $dir build missing${NC}"\n            ((errors++))\n        fi\n    done\n    \n    # Check if package.json files exist\n    for dir in "${REQUIRED_DIRS[@]}"; do\n        if [ -f "$BUILD_DIR/$dir/package.json" ]; then\n            echo -e "${GREEN}  ‚úÖ $dir package.json found${NC}"\n        else\n            echo -e "${RED}  ‚ùå $dir package.json missing${NC}"\n            ((errors++))\n        fi\n    done\n    \n    # Check scripts\n    if [ -d "$BUILD_DIR/scripts" ]; then\n        script_count=$(find "$BUILD_DIR/scripts" -name "*.sh" | wc -l)\n        echo -e "${GREEN}  ‚úÖ $script_count shell scripts included${NC}"\n    else\n        echo -e "${RED}  ‚ùå Scripts directory missing${NC}"\n        ((errors++))\n    fi\n    \n    if [ $errors -eq 0 ]; then\n        echo -e "${GREEN}‚úÖ Build verification passed${NC}"\n        return 0\n    else\n        echo -e "${RED}‚ùå Build verification failed with $errors errors${NC}"\n        return 1\n    fi\n}\n\n# Main execution\nmain() {\n    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"\n    echo -e "${PURPLE}üèóÔ∏è ACE CRM Production Build System${NC}"\n    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"\n    echo -e "${BLUE}Build started at: $(date)${NC}"\n    echo -e "${BLUE}Build timestamp: $BUILD_TIMESTAMP${NC}"\n    echo -e "${BLUE}Environment: $NODE_ENV${NC}"\n    echo -e "${BLUE}Project root: $PROJECT_ROOT${NC}"\n    echo -e "${BLUE}Build directory: $BUILD_DIR${NC}"\n    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\\n"\n    \n    # Run build process\n    check_build_requirements\n    \n    echo -e "\\n${BLUE}Step 1: Cleanup${NC}"\n    clean_builds "$1"\n    \n    echo -e "\\n${BLUE}Step 2: Setup${NC}"\n    create_build_structure\n    \n    echo -e "\\n${BLUE}Step 3: Build Components${NC}"\n    build_backend\n    build_frontend\n    build_client_portal\n    \n    echo -e "\\n${BLUE}Step 4: Package Build${NC}"\n    copy_additional_files\n    generate_deployment_docs\n    create_build_manifest\n    \n    echo -e "\\n${BLUE}Step 5: Verification${NC}"\n    if verify_build; then\n        echo -e "\\n${GREEN}üéâ Build completed successfully!${NC}"\n        \n        # Show build summary\n        echo -e "\\n${CYAN}üìä Build Summary:${NC}"\n        echo -e "${BLUE}  Build directory: $BUILD_DIR${NC}"\n        echo -e "${BLUE}  Total size: $(du -sh "$BUILD_DIR" | cut -f1)${NC}"\n        echo -e "${BLUE}  Components: $(ls -1 "$BUILD_DIR" | grep -E '^(backend|frontend|client-portal)$' | wc -l)/3${NC}"\n        echo -e "${BLUE}  Scripts: $(find "$BUILD_DIR/scripts" -name "*.sh" | wc -l) shell scripts${NC}"\n        \n        echo -e "\\n${CYAN}üìã Next Steps:${NC}"\n        echo -e "${BLUE}  1. Review build manifest: cat $BUILD_DIR/MANIFEST.json${NC}"\n        echo -e "${BLUE}  2. Test deployment: cd $BUILD_DIR && ./scripts/start-all.sh${NC}"\n        echo -e "${BLUE}  3. Deploy to production server${NC}"\n        echo -e "${BLUE}  4. Configure reverse proxy (nginx)${NC}"\n        echo -e "${BLUE}  5. Set up monitoring and backups${NC}"\n        \n        echo -e "\\n${GREEN}‚ú® Ready for production deployment!${NC}"\n    else\n        echo -e "\\n${RED}‚ùå Build failed verification${NC}"\n        exit 1\n    fi\n}\n\n# Handle script arguments\ncase "${1:-}" in\n    --clean-deps)\n        echo -e "${YELLOW}üßπ Full clean build (including dependencies)${NC}"\n        main --clean-deps\n        ;;\n    --help)\n        echo "ACE CRM Production Build Script"\n        echo ""\n        echo "Usage: $0 [OPTIONS]"\n        echo ""\n        echo "Options:"\n        echo "  --clean-deps    Clean node_modules before building"\n        echo "  --help         Show this help message"\n        echo ""\n        echo "This script builds all ACE CRM components for production deployment."\n        ;;\n    "")\n        main\n        ;;\n    *)\n        echo -e "${RED}‚ùå Unknown option: $1${NC}"\n        echo "Use --help for usage information"\n        exit 1\n        ;;\nesac